from typing import Union
from query_index import rag_pipeline, RespostaRAG
from utils_tools.config_loader import load_config
from core.crew_manager import executar_fallback_concierge, create_agents_from_yaml
from core.graph_loader import get_composable_graph
from utils_tools.model_logger import log_error
import logging

logger = logging.getLogger(__name__)


class MultiIndexFAQRouter:
    """
    Roteador respons√°vel por consultar m√∫ltiplos √≠ndices FAQ com fallback para agentes CrewAI,
    utilizando um grafo de conhecimento.
    """

    def __init__(self, salutations=None, welcome_messages=None, notification_warning=None):
        logger.info("üîÑ Inicializando MultiIndexFAQRouter...")
        self.salutations = salutations or []
        self.welcome_messages = welcome_messages or []
        self.notification_warning = notification_warning or []
        self.config = load_config()
        logger.debug("üîß Configura√ß√£o carregada com sucesso.")

        self.grafo = get_composable_graph()
        logger.info("üï∏Ô∏è Grafo unificado criado com sucesso.")

        self.agents = create_agents_from_yaml("config/agents.yaml", [])

    def resposta_aprovada(self, resposta, config: dict) -> bool:
        """
        Verifica se a resposta passou nos crit√©rios de valida√ß√£o.

        Par√¢metros:
            resposta: Objeto de resposta retornado pelo RAG.
            config (dict): Configura√ß√µes que incluem limiar de confian√ßa.

        Retorna:
            bool: True se aprovada, False se falhar na valida√ß√£o ou confian√ßa.
        """
        min_conf = config.get("confidence", {}).get("min_confidence", 0.75)
        result = resposta.passou_validacao and resposta.confianca >= min_conf
        logger.debug(
            f"üìä Valida√ß√£o da resposta ‚Äî limiar: {min_conf}, passou: {resposta.passou_validacao}, confian√ßa: {resposta.confianca}"
        )
        return result

    def responder(self, pergunta: str, session_history: list = None) -> RespostaRAG:
        """
        Processa a pergunta utilizando o pipeline RAG com fallback inteligente.

        Par√¢metros:
            pergunta (str): Pergunta do usu√°rio.
            session_history (list): Hist√≥rico de conversas da sess√£o.

        Retorna:
            RespostaRAG: Objeto com resposta, fontes, confian√ßa e status de valida√ß√£o.
        """
        logger.info(f"üöÄ Processando pergunta: {pergunta}")

        # Montar prompt com hist√≥rico, se houver
        if session_history:
            contexto = "\n".join([
                f"Usu√°rio: {msg['user_message']}\nAssistente: {msg['bot_response']}"
                for msg in session_history if msg.get("user_message") and msg.get("bot_response")
            ])
            prompt_completo = (
                f"Este √© o hist√≥rico da conversa at√© agora:\n"
                f"{contexto}\n\n"
                f"Agora responda √† nova pergunta do usu√°rio com base nesse hist√≥rico:\n"
                f"Usu√°rio: {pergunta.strip()}"
            )
        else:
            prompt_completo = pergunta

        try:
            resposta = rag_pipeline(self.grafo, prompt_completo)
            logger.debug("üì• Resposta recebida com sucesso do rag_pipeline.")
        except Exception as e:
            log_error(f"Erro ao processar a consulta: {str(e)}")
            logger.exception("‚ùå Erro ao executar rag_pipeline.")
            return RespostaRAG(
                resposta="Houve um erro ao processar sua consulta.",
                fontes=[],
                confianca=0.0,
                comentario="Erro de execu√ß√£o no rag_pipeline.",
                tipo="erro",
                passou_validacao=False
            )

        if not self.resposta_aprovada(resposta, self.config):
            logger.warning("‚ö†Ô∏è Resposta com baixa confian√ßa. Delegando para fallback.")
            resposta_fallback = executar_fallback_concierge(
                pergunta,
                resposta.resposta,
                self.agents
            )
            return RespostaRAG(
                resposta=resposta_fallback,
                fontes=[],
                confianca=resposta.confianca,
                comentario="Resposta gerada via fallback Concierge.",
                tipo="agente",
                passou_validacao=False
            )

        logger.info("‚úÖ Resposta v√°lida encontrada.")
        resposta.comentario = "Resposta validada via RAG com sucesso."
        return resposta
