"""
M√≥dulo de utilidades para extra√ß√£o e visualiza√ß√£o de perguntas e respostas, com foco em suporte √† avalia√ß√£o via RAGAS.

Fun√ß√µes:
- extrair_qa_por_regex: usa express√£o regular para extrair perguntas e respostas de um texto bruto.
- dividir_em_contextos: divide o conte√∫do de texto em blocos l√≥gicos.
- mostrar_resultados_ragas: exibe os resultados da avalia√ß√£o RAGAS no Streamlit.
"""

import json
import re
import streamlit as st
from datasets import Dataset
import pandas as pd
import matplotlib.pyplot as plt

def extrair_qa_por_regex(conteudo, n_qas=5):
    """
    Extrai pares de pergunta e resposta de um texto bruto usando regex.

    Args:
        conteudo (str): Texto contendo perguntas e respostas.
        n_qas (int): N√∫mero m√°ximo de pares a retornar.

    Returns:
        list: Lista de dicion√°rios com campos 'pergunta' e 'resposta'.
    """
    padrao = re.compile(r"[Qq][:Ôºö]\s*(.*?)\s*(?:\r?\n)+[Aa][:Ôºö]\s*(.*?)(?=(?:\r?\n){2,}|$)", re.DOTALL)
    matches = padrao.findall(conteudo)
    return [{"pergunta": q.strip(), "resposta": a.strip()} for q, a in matches][:n_qas]

def dividir_em_contextos(conteudo):
    """
    Divide um texto em blocos de contexto separados por linhas em branco.

    Args:
        conteudo (str): Texto completo.

    Returns:
        list: Lista de blocos de texto.
    """
    return [p.strip() for p in conteudo.split("\n\n") if p.strip()]

def mostrar_resultados_ragas(resultados):
    """
    Exibe os resultados da avalia√ß√£o RAGAS no Streamlit com histogramas.

    Args:
        resultados (EvaluationResult): Objeto de avalia√ß√£o retornado pelo RAGAS.
    """
    try:
        df_ragas = resultados.to_pandas()
        metricas = df_ragas.mean(numeric_only=True)
        st.markdown("### üìà M√©tricas m√©dias")
        st.json({k: round(v, 3) for k, v in metricas.items()})
        st.markdown("### üìã Resultados completos")
        st.dataframe(df_ragas)

        for metrica in metricas.index:
            fig, ax = plt.subplots()
            ax.hist(df_ragas[metrica].dropna(), bins=10)
            ax.set_title(metrica)
            ax.set_xlabel(metrica)
            ax.set_ylabel("Frequ√™ncia")
            st.pyplot(fig)
    except Exception as e:
        st.error(f"Erro ao processar resultados do RAGAS: {e}")
